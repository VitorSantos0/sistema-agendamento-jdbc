CREATE TABLE IF NOT EXISTS servico
(
    id SERIAL PRIMARY KEY UNIQUE,
    descricao varchar(255) NOT NULL,
    valor numeric(9,2) NOT NULL,
    categoria varchar(255) NOT NULL,
    ativo integer NOT NULL
);

CREATE TABLE IF NOT EXISTS cliente
(
    id SERIAL PRIMARY KEY UNIQUE,
    nome varchar(255) NOT NULL,
    cpf varchar(255),
    endereco varchar(255),
	telefone varchar(255)
);

CREATE TABLE IF NOT EXISTS agendamento
(
    id SERIAL PRIMARY KEY UNIQUE,
    servico_id integer NOT NULL,
    cliente_id integer NOT NULL,
    nome_profissional varchar(255),
    data_servico date NOT NULL,
    hora_servico time NOT NULL,
    data_hora_lancamento timestamp DEFAULT CURRENT_TIMESTAMP,
    data_hora_cancelamento timestamp,
    CONSTRAINT fk_servico FOREIGN KEY (servico_id) REFERENCES servico (id),
    CONSTRAINT fk_cliente FOREIGN KEY (cliente_id) REFERENCES cliente (id)
);

INSERT INTO servico (descricao, valor, categoria, ativo) 
VALUES ('manicure', 40, 'unha', 1),
('pedicure', 30, 'unha',1),
('corte feminino',40,'cabelo',1),
('corte masculino',25,'cabelo',1),
('corte infantil',32,'cabelo',1),
('barba',15,'rosto',1),
('depilação a laser',130,'depilação',0),
('depilação de cera',50,'depilação',0),
('escovação e prancha',80,'cabelo',1),
('luzes feminino',120,'cabelo',1),
('luzes masculino',30,'cabelo',1),
('sobrancelha',25,'rosto',1),
('limpeza facial',100,'rosto',1);

CREATE VIEW servicos_ativos AS
	SELECT * FROM servico WHERE ativo = 1;

CREATE OR REPLACE FUNCTION quantidade_agendamentos_dia() RETURNS integer
LANGUAGE plpgsql
AS $$
	DECLARE
		qtdAgendamentos integer;
	BEGIN
		SELECT COUNT(id) INTO qtdAgendamentos FROM agendamento 
		WHERE data_servico = CURRENT_DATE;
		RETURN qtdAgendamentos;
	END
$$;